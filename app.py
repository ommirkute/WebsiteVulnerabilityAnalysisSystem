import requests
from flask import Flask
from flask import render_template, request, redirect, url_for, Markup
import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint
import os
import sys
import time
from datetime import datetime
import validators
from urllib.request import urlopen

app = Flask(__name__)
app.url_map.strict_slashes = False

def check(url):
    if '/' in url:
        res = ''.join(url).rindex('/')
        if url.count('/') > 3 and validators.url(url):
            return True
        if url.count('/') == 3 and res+1 == len(url):
            return False
        if url.count('/') == 3 and res + 1 < len(url) and validators.url(url):
            return True
        else:
            return False
    else:
        return False
@app.route('/', methods=['GET'])

def hello_world():
    message = ""
    if request.method == 'GET':
        number = request.args.get("number")
        # to check wether the user has entered a number
        if number:
             # to check for valid options
            if number == '1' or number == '2' or number == '3' or number == '4':
                return redirect(url_for('option', i=number))
            # error message after invalid input
            else:
                message = "Invalid input"
                return render_template('index.html', message = message)

    return render_template('index.html', message = message)

@app.route('/<i>/', methods = ['POST', 'GET'])
def option(i):
    if i != '1' or i != '2' or i != '3' or i != '4':
        l = ""
    js = ''
    out = ''
    detect = ''
    f = ''
    new = ''
    res = ''
    res_url1 = ''
    dt_string = ''
    dt_string_url1 = ''
    result = ''
    end = ''
    vulnerable = ""
    if request.method == 'GET':
        url1 = request.args.get('urls')
        host = request.args.get('host')
        if host:
            return redirect(url_for('result', option = i,host = host, port = '80'))

        def get_forms(url):
            soup = bs(requests.get(url).content, "html.parser")
            return soup.find_all("form")

        def get_details(form):
            details = {}
            action = form.attrs.get("action").lower()
            method = form.attrs.get("method", "get").lower()
            inputs = []
            for input_tag in form.find_all("input"):
                input_type = input_tag.attrs.get("type", "text")
                input_name = input_tag.attrs.get("name")
                inputs.append({"type": input_type, "name": input_name})
            details["action"] = action
            details["method"] = method
            details["inputs"] = inputs
            return details

        def submit_form(form_details, url, value):
            target_url = urljoin(url, form_details["action"])
            inputs = form_details["inputs"]
            data = {}
            for input in inputs:
                if input["type"] == "text" or input["type"] == "search":
                    input["value"] = value
                input_name = input.get("name")
                input_value = input.get("value")
                if input_name and input_value:
                    data[input_name] = input_value

            if form_details["method"] == "post":
                return requests.post(target_url, data=data)
            else:
                return requests.get(target_url, params=data)
            if js_script in content:
                js = Markup('[+] XSS Detected on {} <br> [*] Form details:').format(url1)
        if url1:
            valid = check(url1)
            if valid==True:
                start = time.time()
                out = Markup('____________________________________________________ <br> Report <br>____________________________________________________<br>'
                             'The url is: {}').format(url1)
                forms = get_forms(url1)

                js_script = "<Script>alert('hi')</scripT>"
                is_vulnerable = False
                for form in forms:
                    form_details = get_details(form)
                    content = submit_form(form_details, url1, js_script).content.decode()
                    if js_script in content:
                        js = Markup('<h3 style ="color:red; font-weight: bold;"> Website is vulnerable to XSS.</h3>'
                                     '____________________________________________________<br>'
                                     'Mitigation<br>____________________________________________________<br>'
                                     'You Must check the following:<br>1. Filter input<br>2. Use escaping/encoding'
                                     '<br>3. Sanitize HTML<br>'
                                     '4. Use a Content Security Policy<br>____________________________________________________')
                        is_vulnerable = True

                if is_vulnerable:
                    vulnerable = ""
                else:
                    vulnerable = Markup('<h3 style = "color: green;">Website is not vulnerable to XSS</h3>')
            else:
                # Give this message if the url is not vulnable to xss
                end = Markup('<h3 style = "color: green;">Website is not vulnerable to XSS</h3>')


    if request.method == 'POST':
        s = requests.Session()
        s.headers[
            "User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36 "

        def get_forms(url):
            soup = bs(s.get(url).content, "html.parser")
            return soup.find_all("form")

        def get_details(form):
            details = {}
            try:
                action = form.attrs.get("action").lower()
            except:
                action = None
            method = form.attrs.get("method", "get").lower()
            inputs = []
            for input_tag in form.find_all("input"):
                input_type = input_tag.attrs.get("type", "text")
                input_name = input_tag.attrs.get("name")
                input_value = input_tag.attrs.get("value", "")
                inputs.append({"type": input_type, "name": input_name, "value": input_value})
            details["action"] = action
            details["method"] = method
            details["inputs"] = inputs
            return details

        def is_vulnerable(response):
            errors = {
                "you have an error in your sql syntax;",
                "warning: mysql",
                "unclosed quotation mark after the character string",
                "quoted string not properly terminated",
            }
            for error in errors:
                if error in response.content.decode().lower():
                    return True
            return False
        url = request.form.get('url')
        if url:
            valid = check(url)
            if valid == True:
                start = time.time()
                f = Markup('----------------------------------<br> Report <br>-----------'
                           '-----------------------<br> The url is  {}').format(url)
                for c in "\"'":
                    new_url = f"{url}{c}"

                    res = s.get(new_url)
                    if is_vulnerable(res):
                        result = Markup('<h3 style ="color:red; font-weight: bold;"> SQL Injection vulnerability detected.</h3>'
                                     '____________________________________________________<br>'
                                     'Mitigation<br>____________________________________________________<br>'
                                     'You Must check the following:<br>1. Input validation<br>2. Parametrized queries'
                                     '<br>3. Stored procedures<br>'
                                     '4. Avoiding administrative privileges<br>'
                                     '5. Web application firewall<br>____________________________________________________')
                    # if the url is not vulnerable
                    else:
                        end = Markup('<h3 style = "color: green;">Website is not vulnerable to SQL injection</h3>')

                forms = get_forms(url)

                for form in forms:
                    form_details = get_details(form)
                    for c in "\"'":
                        data = {}
                        for input_tag in form_details["inputs"]:
                            if input_tag["type"] == "hidden" or input_tag["value"]:
                                try:
                                    data[input_tag["name"]] = input_tag["value"] + c
                                except:
                                    pass
                            elif input_tag["type"] != "submit":
                                data[input_tag["name"]] = f"test{c}"
                        url = urljoin(url, form_details["action"])
                        if form_details["method"] == "post":
                            res = s.post(url, data=data)
                        elif form_details["method"] == "get":
                            res = s.get(url, params=data)
                        print(res)
                        if is_vulnerable(res):
                            dt_string_url1 = Markup('<h3 style ="color:red; font-weight: bold;"> SQL Injection vulnerability detected.</h3>'
                                     '____________________________________________________<br>'
                                     'Mitigation<br>____________________________________________________<br>'
                                     'You Must check the following:<br>1. Input validation<br>2. Parametrized queries'
                                     '<br>3. Stored procedures<br>'
                                     '4. Escaping<br>5. Avoiding administrative privileges<br>'
                                     '6. Web application firewall<br>____________________________________________________')
                            break
            else:
                end = Markup('<h3 style = "color: green;">Website is not vulnerable to SQL injection</h3>')
    return render_template("option3.html",vulnerable = vulnerable, n = l,res_url1 = res_url1,result = result, dt_string_url1 =dt_string_url1,k = i, f=f, new = new, res = res, dt_string = dt_string, end = end, js = js, out = out, detect = detect)

@app.route('/<option>/<url>/')
def scan(option, url):
    for c in "\"'":
        new_url = f"{url}{c}"
    return render_template('scan.html', option = option, url = url, new_url = new_url)


@app.route('/<option>/<host>/<port>')
def result(option, host, port):
    start = time.time()
    result =''
    if option == '3':
        if port == '80':
            port = 'http://'

        url = (port + host)
        data = urlopen(url)
        headers = data.info()
        if not "X-Frame-Options" in headers:
            result = Markup('<h3 style = "color: red;">Website is vulnerable to Clickjacking</h3>' 
                                    '____________________________________________________<br>'
                                     'Mitigation<br>____________________________________________________<br>'
                                     'You Must check the following:<br>1. Client-side defenses<br>2. Using the X-Frame-Options header'
                                     '<br>3. Using cookies sameSite origin<br>')
        else:
            result = Markup('<h3 style = "color: green;">Website is not vulnerable to Clickjacking</h3>')
    if option == '4':
        if port == '80':
            port = 'http://'
        else:
            result = Markup("<p>Could'nt fetch data for the given PORT<p>")
        url = (port + host)
        headers = {'Host': 'http://evil.com'}
        response = requests.get(url, headers=headers)
        if 'evil.com' in response.headers:
            result = Markup('<h3 style = "color: red;">Website is vulnerable to Host Header Injection</h3>'
                            '____________________________________________________<br>'
                            'Mitigation<br>____________________________________________________<br>'
                            'You Must check the following:<br>1. Validate the Host header<br>2. Protect absolute URLs'
                            '<br>3. Whitelist permitted domains<br>')

        else:
            result = Markup('<h3 style = "color: green;">Website is not vulnerable to Host Header Injection</h3>')
    return render_template('result.html',n = result, host = host, port = port, option = option)

if __name__ == '__main__':
    app.run(debug=True)
